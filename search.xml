<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【游戏开发】Unity3D的场景切换（开始、游戏场景、退出游戏）</title>
      <link href="/2019/10/27/%E3%80%90%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E3%80%91Unity3D%E7%9A%84%E5%9C%BA%E6%99%AF%E5%88%87%E6%8D%A2%EF%BC%88%E5%BC%80%E5%A7%8B%E3%80%81%E6%B8%B8%E6%88%8F%E5%9C%BA%E6%99%AF%E3%80%81%E9%80%80%E5%87%BA%E6%B8%B8%E6%88%8F%EF%BC%89/"/>
      <url>/2019/10/27/%E3%80%90%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E3%80%91Unity3D%E7%9A%84%E5%9C%BA%E6%99%AF%E5%88%87%E6%8D%A2%EF%BC%88%E5%BC%80%E5%A7%8B%E3%80%81%E6%B8%B8%E6%88%8F%E5%9C%BA%E6%99%AF%E3%80%81%E9%80%80%E5%87%BA%E6%B8%B8%E6%88%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="游戏中的开始界面到游戏界面的切换，以及游戏退出如何在Unity3D中实现？"><a href="#游戏中的开始界面到游戏界面的切换，以及游戏退出如何在Unity3D中实现？" class="headerlink" title="游戏中的开始界面到游戏界面的切换，以及游戏退出如何在Unity3D中实现？"></a>游戏中的开始界面到游戏界面的切换，以及游戏退出如何在Unity3D中实现？</h1><h2 id="基本资源"><a href="#基本资源" class="headerlink" title="基本资源"></a>基本资源</h2><p>需要在Assets下建立两个场景（右键-&gt;Create-&gt;Scene）一个场景作为开始菜单，另一个场景作为游戏界面。<br>在开始场景中新建画布（Canvas），画布中新建两个按钮（Button）。一个按钮中文本为“开始游戏”，另一个为“退出游戏”。</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>Assets下新建脚本MainMenu，用来管理场景切换。<br>需要的两个命名空间分别为<code>using UnityEngine;</code>和<code>using UnityEngine.SceneManagement;</code>。其中，<code>using UnityEngine.SceneManagement;</code>用来管理场景。<br>删除不必要的Start()和Update()函数，然后在MainMenu类中添加如下代码：</p><figure class="highlight c"><figcaption><span>SceneManager</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用这个函数触发切换到场景列表中下一个场景</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayGame</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//加载编号比当前场景大1的场景</span></span><br><span class="line">    SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用这个函数退出游戏</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">QuitGame</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Debug.Log(<span class="string">"Quit!"</span>);</span><br><span class="line">    Application.Quit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调整场景列表和按钮函数"><a href="#调整场景列表和按钮函数" class="headerlink" title="调整场景列表和按钮函数"></a>调整场景列表和按钮函数</h2><p>现在基本的场景和脚本都准备完毕。剩下的操作为：</p><ol><li>将MainMenu脚本拖拽至开始菜单场景的MainCamera上</li><li>Unity中打开File-&gt;Build Settings，将游戏开始场景拖拽至Scenes In Build窗口，注意开始场景的编号应比游戏场景多1</li><li>给开始按钮添加函数PlayGame，给退出按钮添加QuitGame函数（在监视面板的Button中将MainCamera拖至On Click内，选择需要的函数）</li></ol><p>完成，现在运行游戏后点击“开始游戏”，场景将切换至游戏场景。<br>想要从游戏界面回到菜单，则函数类似，只不过变成场景编号-1。<br>注意，Application.Quit()的效果只能在Build之后查看，Unity编辑器中没有效果（Unity编辑器中只有我们添加的控制台语句）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Unity3D </tag>
            
            <tag> 游戏开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【游戏开发】Unity中的txt文本读取及显示</title>
      <link href="/2019/10/09/%E3%80%90%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E3%80%91Unity%E4%B8%AD%E7%9A%84txt%E6%96%87%E6%9C%AC%E8%AF%BB%E5%8F%96%E5%8F%8A%E6%98%BE%E7%A4%BA/"/>
      <url>/2019/10/09/%E3%80%90%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E3%80%91Unity%E4%B8%AD%E7%9A%84txt%E6%96%87%E6%9C%AC%E8%AF%BB%E5%8F%96%E5%8F%8A%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="如何使用脚本将一个txt文本逐行读入Unity并打印？"><a href="#如何使用脚本将一个txt文本逐行读入Unity并打印？" class="headerlink" title="如何使用脚本将一个txt文本逐行读入Unity并打印？"></a>如何使用脚本将一个txt文本逐行读入Unity并打印？</h1><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>首先需要在脚本中包含<code>using System.IO;</code>。<br>这个不是Unity的，而是C#中的，用于处理文件读写。包含这个，才能使用进行文件读取所需要的类和方法。<br>之后，加上用于操作Unity中UI控件的<code>using UnityEngine.UI;</code>。<br>准备完毕。</p><h2 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h2><p>下一步，在类中定义<code>public Text myText;</code>然后在Unity窗口操作，使其引用一个游戏中的文本框，便于之后修改并显示文本。<br>此外，需要定义<code>private string fileName;</code>用于存储txt文件的相对路径；定义<code>private string[] strs;</code>用于存储读取的文本内容。</p><h2 id="txt文本文件"><a href="#txt文本文件" class="headerlink" title="txt文本文件"></a>txt文本文件</h2><p>将需要的文本文件写好，每一句用换行符分隔。<br>txt文件存储的位置随意，只要位于工程文件夹（即用本工程名称命名的文件夹）内即可。<br>注意记住该位置相对于工程文件夹的相对位置。<br>如我在工程文件夹下新建文件夹命名为“Text”，并存储文件“A.txt”在文件夹内。</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>脚本逻辑如下：</p><ol><li>首先中为对象赋初值：<code>fileName = &quot;Text/A.txt&quot;;  //读取文件位置</code>；</li><li>然后开始读取并存储文本：<code>strs = File.ReadAllLines(fileName);   //将文件内容存入strs</code>；</li><li>最后将句子显示在文本框中：<code>foreach (string str in strs){myText.text += str; myText.text += &quot;\n&quot;;}   //更新文本框内容</code>；</li></ol><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight c"><figcaption><span>ShowText</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowText</span> :</span> MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Text myText;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> fileName;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span>[] strs;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        fileName = <span class="string">"Text/A.txt"</span>;</span><br><span class="line">        strs = <span class="built_in">File</span>.ReadAllLines(fileName);</span><br><span class="line"></span><br><span class="line">        myText.<span class="built_in">text</span> = <span class="string">""</span>;</span><br><span class="line">        </span><br><span class="line">        foreach(<span class="built_in">string</span> str in strs)</span><br><span class="line">        &#123;</span><br><span class="line">            myText.<span class="built_in">text</span> += str;</span><br><span class="line">            myText.<span class="built_in">text</span> += <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Unity中效果"><a href="#Unity中效果" class="headerlink" title="Unity中效果"></a>Unity中效果</h1><img src="/images/UnityReadFile.jpg" title="Unity中文件读取">]]></content>
      
      
      
        <tags>
            
            <tag> Unity3D </tag>
            
            <tag> 游戏开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【读书笔记】C++泛型编程学习小结</title>
      <link href="/2019/08/23/%E3%80%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%91C-%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/"/>
      <url>/2019/08/23/%E3%80%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%91C-%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型指针（Iterator）"><a href="#泛型指针（Iterator）" class="headerlink" title="泛型指针（Iterator）"></a>泛型指针（Iterator）</h1><p>指针作为算法中常用的工具，在泛型编程中进行了“泛型化”，使其可以针对不同容器展现相同行为，达到了十分便捷、通用的抽象效果。<br>取得iterator，可以借助标准容器的begin()及end()操作函数，前者返回指向第一个元素的iterator，后者指向最后一个元素。<br>iterator可以进行赋值（assign）、比较（compare）、递增（increment）、提领（dereference）操作。<br>用法案例：</p><ul><li>一个指向vector开头的泛型指针：<code>vector&lt;string&gt;::iterator iter=svec.begin();</code></li><li>一个指向vector结尾的常量泛型指针：<code>vector&lt;string&gt;::const_iterator iter=vec.end();</code></li></ul><h1 id="泛型算法（Generic-Algorithms）"><a href="#泛型算法（Generic-Algorithms）" class="headerlink" title="泛型算法（Generic Algorithms）"></a>泛型算法（Generic Algorithms）</h1><h2 id="使用泛型算法"><a href="#使用泛型算法" class="headerlink" title="使用泛型算法"></a>使用泛型算法</h2><p>头文件：<code>#include &lt;algorithm&gt;</code><br>泛型算法与泛型指针配合使用：<code>binary_search(vec.begin(), vec.end(), elem);</code></p><h2 id="设计泛型算法"><a href="#设计泛型算法" class="headerlink" title="设计泛型算法"></a>设计泛型算法</h2><h3 id="Function-Object"><a href="#Function-Object" class="headerlink" title="Function Object"></a>Function Object</h3><p>function object可以消除泛型算法中“通过函数指针来调用函数”时需付出的额外代价。<br>使用预先定义的function object，需包含头文件：<code>#include &lt;functional&gt;</code><br>使用案例：<code>sort(vec.begin(), vec.end(), greater&lt;int&gt;);</code>其中的<code>greater&lt;int&gt;()</code>会产生一个未命名的class template object，传给sort()。</p><h3 id="Function-Object-Adapter"><a href="#Function-Object-Adapter" class="headerlink" title="Function Object Adapter"></a>Function Object Adapter</h3><p>标准库提供了adapter（适配器)来完成function object的个性化使用。<br>binder adapter（绑定适配器）可以将function object的参数绑定至某特定值，使binary function object转化为unary function object。<br>negator可以对function object的真伪值取反。</p><h3 id="Iterator-Inserter"><a href="#Iterator-Inserter" class="headerlink" title="Iterator Inserter"></a>Iterator Inserter</h3><p>可以使用特定的赋值函数取代assignment运算符。<br>需包含头文件：<code>#include &lt;iterator&gt;</code></p><h3 id="iostream-Iterator"><a href="#iostream-Iterator" class="headerlink" title="iostream Iterator"></a>iostream Iterator</h3><p>此类泛型指针可以指向各类输入输出设备，结合泛型算法copy()使用，可以进行输入输出。<br>也需包含头文件：<code>#include &lt;iterator&gt;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 笔记 </tag>
            
            <tag> Essential C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++中srand()及rand()的最简单用法浅析</title>
      <link href="/2019/07/27/C-%E4%B8%ADsrand-%E5%8F%8Arand%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95%E6%B5%85%E6%9E%90/"/>
      <url>/2019/07/27/C-%E4%B8%ADsrand-%E5%8F%8Arand%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="生成5-200之间的随机整数"><a href="#生成5-200之间的随机整数" class="headerlink" title="生成5-200之间的随机整数"></a>生成5-200之间的随机整数</h1><p>C++中，标准库提供了一种伪随机数（pseudo-random number）生成器，可以达到随机获取某两个数之间的一个数的效果。<br>我们以随机获取5-200之间的一个整数为例。首先看完整代码。</p><figure class="highlight c"><figcaption><span>pseudo-random number</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;  //为使用srand()及rand()引入标准库 </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MIN = <span class="number">5</span>;   <span class="comment">//随机数最小值为5</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">200</span>; <span class="comment">//随机数最小值为200 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"></span><br><span class="line">srand( MAX - MIN );    <span class="comment">//设置随机数种子 </span></span><br><span class="line"><span class="keyword">int</span> my_random;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123; </span><br><span class="line">my_random = rand() % (MAX - MIN) + MIN; <span class="comment">//获取一个随机数并打印 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;my_random&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>在我的计算机上随机到的结果为：96，85，165，176，191，116，68，91，5，19。可以看出代码是没有问题的。</p><h1 id="语法解析"><a href="#语法解析" class="headerlink" title="语法解析"></a>语法解析</h1><p>首先，<code>#include &lt;cstdlib&gt;</code>在头文件中引入了C++的标准库，之后才可以使用srand()以及rand()这两个函数。之后初始化最大值和最小值。<br>srand()函数用于设置种子（seed），种子可以简单理解为之后rand()所获得的随机数的最小值。而rand()所能获得的最大值为整型的最大值，<code>rand() % (MAX - MIN)</code>将等概率得到一个0-195之间的数，因为求余运算使得这个数只能落在0-195之间。<br>最后，<code>my_random = rand() % (MAX - MIN) + MIN;</code>将获得一个5-200之间的随机数。</p><h1 id="扩展使用"><a href="#扩展使用" class="headerlink" title="扩展使用"></a>扩展使用</h1><p>同理，不论是想要获得怎样的随机数，只要首先将其转化为等价的0-N随机数获取，再进行结果值调整即可。例如，获得一个-50.0-50.0之间的随机一位小数，只要改动代码如下。</p><figure class="highlight c"><figcaption><span>more pseudo-random number</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;  //为使用srand()及rand()引入标准库 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;  //设置格式 </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MIN = <span class="number">-50</span>;   <span class="comment">//随机数最小值为-50 </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">50</span>; <span class="comment">//随机数最小值为50 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;setiosflags(ios::fixed)&lt;&lt;setprecision(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">srand(( MAX - MIN )*<span class="number">10</span>);    <span class="comment">//设置随机数种子 </span></span><br><span class="line"><span class="keyword">float</span> my_random;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123; </span><br><span class="line">my_random = (rand() % (( MAX - MIN )*<span class="number">10</span>))/<span class="number">10.0</span> + MIN; <span class="comment">//获取一个随机数并打印 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;my_random&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 笔记 </tag>
            
            <tag> Essential C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于删除hexo个人博客文章时的坑</title>
      <link href="/2019/07/24/%E5%85%B3%E4%BA%8E%E5%88%A0%E9%99%A4hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E6%97%B6%E7%9A%84%E5%9D%91/"/>
      <url>/2019/07/24/%E5%85%B3%E4%BA%8E%E5%88%A0%E9%99%A4hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E6%97%B6%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="记录一个删除hexo博文时的坑"><a href="#记录一个删除hexo博文时的坑" class="headerlink" title="记录一个删除hexo博文时的坑"></a>记录一个删除hexo博文时的坑</h1><h2 id="别在source文件夹为空时执行hexo-clean"><a href="#别在source文件夹为空时执行hexo-clean" class="headerlink" title="别在source文件夹为空时执行hexo clean"></a>别在source文件夹为空时执行hexo clean</h2><p>网上许多文章说删除hexo文章时，先在source文件夹下删掉相应的md文件，再执行hexo g。<br>这时很多人会发现文章还是存在，于是又有人说要执行hexo clean。<br>我试了之后发现，<br><strong><em>千万不要在_post文件夹中没有文件时执行hexo clean！！！这样做会使你的整个博客404！！！</em></strong></p><hr><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="如果已经执行了而且真的404了怎么办？"><a href="#如果已经执行了而且真的404了怎么办？" class="headerlink" title="如果已经执行了而且真的404了怎么办？"></a>如果已经执行了而且真的404了怎么办？</h3><p>不用重新搭建博客！只需要把文件夹结构恢复至初始结构就行了，我当时给source文件夹下重新添加了_post文件夹，然后用hexo new重新发一篇新的文章，再hexo g就好了。</p><h3 id="正确的清空文章姿势"><a href="#正确的清空文章姿势" class="headerlink" title="正确的清空文章姿势"></a>正确的清空文章姿势</h3><p>原则是<strong>_post文件夹不能为空</strong>，所以主要有以下几种方法：</p><ol><li>等到下一篇文章创建后再删除之前的</li><li>直接删除原文章的标题和内容，但不要删除文件，等想要写下一篇时在这个文件上改</li><li>给文章设置隐藏。请参考博文：<a href="http://blog.fiftykg.com/hexo/hexo%E9%A6%96%E9%A1%B5%E9%9A%90%E8%97%8F%E9%83%A8%E5%88%86%E6%96%87%E7%AB%A0.html" target="_blank" rel="noopener">hexo首页隐藏部分文章</a></li></ol><hr><h2 id="出错原因"><a href="#出错原因" class="headerlink" title="出错原因"></a>出错原因</h2><p>最后来总结一下原理。</p><h3 id="首先，hexo-g执行后为什么文章仍然存在？"><a href="#首先，hexo-g执行后为什么文章仍然存在？" class="headerlink" title="首先，hexo g执行后为什么文章仍然存在？"></a>首先，hexo g执行后为什么文章仍然存在？</h3><p>在<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">hexo官方文档</a>中，说明了g（generate）指令是生成静态网页的指令。且在<a href="https://hexo.io/zh-cn/docs/generating" target="_blank" rel="noopener">生成文件</a>的说明中指出，g指令将比对原有文件，有变动的文件才会更新。我尝试之后发现，g指令没有任何问题，问题出在hexo d！推送到远端后，远端的文章没有被删除，这才是根源。</p><h3 id="那么hexo-clean后为何造成网站崩溃呢？"><a href="#那么hexo-clean后为何造成网站崩溃呢？" class="headerlink" title="那么hexo clean后为何造成网站崩溃呢？"></a>那么hexo clean后为何造成网站崩溃呢？</h3><p>仍旧查看<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">hexo官方文档</a>，hexo clean是一条用于“清除缓存文件 (db.json) 和已生成的静态文件 (public)”的指令。public文件夹下存放的是hexo g后生成的静态网站，其中有一个代表博客主页的index.html，而该网站的生成需要有至少一个_post文件夹下的文章。如果_post文件夹下是空的，在hexo clean后hexo g，会因为找不到publish文件夹下的index.html而404。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 个人博客 </tag>
            
            <tag> 踩坑记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的计算机硬件原型特点小结</title>
      <link href="/2019/07/22/%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E5%8E%9F%E5%9E%8B%E7%89%B9%E7%82%B9%E5%B0%8F%E7%BB%93/"/>
      <url>/2019/07/22/%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E5%8E%9F%E5%9E%8B%E7%89%B9%E7%82%B9%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="一、常用简写"><a href="#一、常用简写" class="headerlink" title="一、常用简写"></a>一、常用简写</h1><p>IC：计算机内部元件</p><h2 id="主要IC"><a href="#主要IC" class="headerlink" title="主要IC"></a>主要IC</h2><ul><li>CPU：中央处理器，相当于计算机的大脑</li><li>I/O：负责把键盘、鼠标、显示器等周边设备和主机连接在一起，实现数据的输入与输出</li><li>内存：存储指令和数据</li></ul><hr><p><strong>如何更加生动地理解呢？</strong><br>计算机最基本的功能就是输入数据、处理数据、输出数据，而CPU、I\O和内存配合，正是为了完成这样的步骤。<br>我个人喜欢将计算机想象成加工工厂，I\O作为传送带将需要的零件运送进来，内存存放零件和图纸，CPU按照图纸加工零件，最后再由I\O运送出厂。</p><h2 id="IC引脚"><a href="#IC引脚" class="headerlink" title="IC引脚"></a>IC引脚</h2><ul><li>Vcc与GND：用于为IC供电</li><li>A：Address，即地址，代表地址总线引脚，指定输入输出数据时的源头或目的地</li><li>D：Data，即数据，代表数据总线引脚，用该引脚进行数据的输入输出</li><li>P：Port，即端口，I\O与外部设备之间输入输出数据的场所</li><li>C：Control，即控制模式，</li><li>NC：No Connection，表示该引脚什么都不连接</li><li>CLK：Clock，即时钟，通过时钟引脚保证CPU和I\O的频率同步</li><li>MREQ：Memory Request，内存请求</li><li>IORQ：I\O Request，I\O请求，和MREQ一起，负责区分访问对象是内存还是I\O</li><li>CE：Chip Enable，选通芯片，设置IC的激活状态</li><li>RD：Read，输入引脚</li><li>WE：Write，输出引脚</li><li>控制引脚<ul><li>M1：Machine Cycle 1，机器周期1</li><li>INT：Interrupt，中断</li><li>RESET：Reset，重置。先设置为0，再还原为1，可以重置CPU</li><li>BUSRQ：Bus Request，总线请求，可以设置DMA（直接存储器访问，不通过CPU进内存）模式</li><li>BUSAK：Bus Acknowledge，响应总线请求</li></ul></li></ul><hr><h1 id="二、原型制作步骤总结"><a href="#二、原型制作步骤总结" class="headerlink" title="二、原型制作步骤总结"></a>二、原型制作步骤总结</h1><h2 id="1-连接电源、数据和地址总线"><a href="#1-连接电源、数据和地址总线" class="headerlink" title="1. 连接电源、数据和地址总线"></a>1. 连接电源、数据和地址总线</h2><p>   1.1 连接CPU、内存和I\O的Vcc引脚和GND引脚<br>   1.2 连接CPU与内存之间的地址总线引脚和数据总线引脚</p><h2 id="2-连接I-O"><a href="#2-连接I-O" class="headerlink" title="2. 连接I\O"></a>2. 连接I\O</h2><p>   2.1 连接CPU与I\O的数据总线引脚<br>   2.2 连接I\O的寄存器与CPU的地址总线引脚</p><h2 id="3-连接时钟信号"><a href="#3-连接时钟信号" class="headerlink" title="3. 连接时钟信号"></a>3. 连接时钟信号</h2><p>   3.1 连接时钟发生器与CPU、I\O的CLK引脚</p><h2 id="4-连接用于区分读写对象是内存还是I-O的引脚"><a href="#4-连接用于区分读写对象是内存还是I-O的引脚" class="headerlink" title="4. 连接用于区分读写对象是内存还是I\O的引脚"></a>4. 连接用于区分读写对象是内存还是I\O的引脚</h2><p>   4.1 将CPU的MREQ引脚连接至内存的CE引脚<br>   4.2 将CPU的IORQ引脚连接至I\O的CE引脚和IORQ引脚上<br>   4.3 连接CPU的RD引脚与内存的RD引脚<br>   4.4 连接CPU的WR引脚与I\O的WE引脚</p><h2 id="5-连接剩余的控制引脚"><a href="#5-连接剩余的控制引脚" class="headerlink" title="5. 连接剩余的控制引脚"></a>5. 连接剩余的控制引脚</h2><p>   5.1 连接CPU与I\O的M1引脚和INT引脚<br>   5.2 连接CPU的RESET、BUSRQ和BUSAK引脚</p><h2 id="6-连接外部设备，通过DMA输入程序"><a href="#6-连接外部设备，通过DMA输入程序" class="headerlink" title="6. 连接外部设备，通过DMA输入程序"></a>6. 连接外部设备，通过DMA输入程序</h2><h2 id="7-连接用于输入输出的外部设备"><a href="#7-连接用于输入输出的外部设备" class="headerlink" title="7. 连接用于输入输出的外部设备"></a>7. 连接用于输入输出的外部设备</h2><h2 id="8-输入测试程序并进行调试"><a href="#8-输入测试程序并进行调试" class="headerlink" title="8. 输入测试程序并进行调试"></a>8. 输入测试程序并进行调试</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计算机是怎样跑起来的 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
